head(y)
1-(pnorm(-1) + (1-pnorm(1)))
pnorm(2) - pnorm(-2)
z <- (y - mean(y))/popsd(y)
mean(abs(z)<=1)
mean(abs(z)<=2)
mean(abs(z)<=3)
qqnorm(z)
abline(0,1)
mypar(1,1)
qqnorm(z)
abline(0,1)
install.packages('rafalib')
library(rafalib)
mypar(1,1)
qqnorm(z)
abline(0,1)
library(rafalib)
mypar(1,1)
qqnorm(z)
abline(0,1)
y<- dat %>% filter(Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
z<- (y-mean(y))/popsd(y)
qqnorm(z)
qqline()
qqnorm(z)
qqline()
mypar(2,2)
y<- dat %>% filter(Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
z<- (y-mean(y))/popsd(y)
qqnorm(z)
abline(0,1)
y<- dat %>% filter(Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist
z<- (y-mean(y))/popsd(y)
qqnorm(z)
abline(0,1)
y<- dat %>% filter(Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist
z<- (y-mean(y))/popsd(y)
qqnorm(z)
abline(0,1)
y<- dat %>% filter(Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist
z<- (y-mean(y))/popsd(y)
qqnorm(z)
abline(0,1)
y <- dat %>%filter(Sex == "M" & Diet == "Chow")%>%select(Bodyweight)%>%unlist
avgs <- replicate(10000,mean(sample(y,25)))
mypar(1,2)
hist(avgs, probability = T)
curve(dnorm(y, mean(x), sd(x)), add = T)
qqnorm(avgs)
qqline(avgs)
y
y
y <- dat %>%filter(Sex == "M" & Diet == "Chow")%>%select(Bodyweight)%>%unlist
y
dat <- read.csv("mice_pheno.csv")
y <- dat %>%filter(Sex == "M" & Diet == "Chow")%>%select(Bodyweight)%>%unlist
y
dat
dat <- read.csv("mice_pheno.csv")
dat<-na.omit(dat)
head(dat)
y<- dat %>% filter(Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist
z<- (y-mean(y))/popsd(y)
qqnorm(z)
abline(0,1)
y<- dat %>% filter(Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist
y
y <- dat %>%filter(Sex == "M" & Diet == "Chow")%>%select(Bodyweight)
y
y <- dat %>%filter(Sex == "M" & Diet == "chow")%>%select(Bodyweight)
y
avgs <- replicate(10000,mean(sample(y,25)))
mypar(1,2)
y <- dat %>%filter(Sex == "M" & Diet == "chow")%>%select(Bodyweight)%>%unlist
avgs <- replicate(10000,mean(sample(y,25)))
mypar(1,2)
hist(avgs, probability = T)
curve(dnorm(y, mean(x), sd(x)), add = T)
qqnorm(avgs)
qqline(avgs)
mean(avgs)
popsd(avgs)
n = 100
x = sample(1:6,n,replace = T)
mean(x==6)
set.seed(1)
n <- 100
sides <- 6
p <- 1/sides
zs <- replicate(1000,{
x <- sample(1:sides,n,replace = T)
(mean(x==6)-p)/sqrt(p*(1-p)/n)
})
qqnorm(zs)
abline(0,1)
mypar(1,1)
qqnorm(zs)
abline(0,1)
mean(abs(zs) > 2)
zs
ps<-c(0.5,0.5,0.01,0.01)
ns<-c(5,30,30,100)
library(rafalib)
mypar(4,2)
for(i in 1:4){
p <- ps[i]
sides<-1/p
n <- ns[i]
zs <- replicate(10000,{
x <- sample(1:6,n,replace = T)
(mean(x)-p)/sqrt(p*(1-p)/n)
})
hist(zs, nclass = 7)
qqnorm(zs)
abline(0,1)
}
ps<-c(0.5,0.5,0.01,0.01)
ns<-c(5,30,30,100)
library(rafalib)
mypar(4,2)
for(i in 1:4){
p <- ps[i]
sides<-1/p
n <- ns[i]
zs <- replicate(10000,{
x <- sample(1:6,n,replace = T)
(mean(x==1)-p)/sqrt(p*(1-p)/n)
})
hist(zs, nclass = 7)
qqnorm(zs)
abline(0,1)
}
dat <- read.csv("mice_pheno.csv")
dat<-na.omit(dat)
head(dat)
X <- filter(dat, Diet = "chow") %>% select(Bodyweight) %>% unlist
Y <- filter(dat, Diet = "hf") %>% select(Bodyweight) %>% unlist
library(dplyr)
X <- filter(dat, Diet = "chow") %>% select(Bodyweight) %>% unlist
Y <- filter(dat, Diet = "hf") %>% select(Bodyweight) %>% unlist
library(dplyr)
X <- filter(dat, Diet == "chow") %>% select(Bodyweight) %>% unlist
Y <- filter(dat, Diet == "hf") %>% select(Bodyweight) %>% unlist
str(X)
mean(X)
dat <- read.csv("femaleMiceWeights(1).csv")
dat <- read.csv("/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/II IA Prac/femaleMiceWeights(1).csv")
dat <- read.csv("/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/II IA Prac/femaleMiceWeights(1).csv")
setwd("/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/II IA Prac/")
dat <- read.csv("femaleMiceWeights(1).csv")
dat <- read.csv("femaleMiceWeights (1).csv")
dat<-na.omit(dat)
head(dat)
library(dplyr)
X <- filter(dat, Diet == "chow") %>% select(Bodyweight) %>% unlist
Y <- filter(dat, Diet == "hf") %>% select(Bodyweight) %>% unlist
str(X)
mean(X)
sd(X)
2 * (1 - pnorm(2/sd(X)*sqrt(12)))
sqrt(sd(X)^2/12 - sd(Y)^2/12)
library(dplyr)
X <- filter(dat, Diet == "chow") %>% select(Bodyweight) %>% unlist
Y <- filter(dat, Diet == "hf") %>% select(Bodyweight) %>% unlist
str(X)
mean(X)
sd(X)
2 * (1 - pnorm(2/sd(X)*sqrt(12)))
sqrt(sd(X)^2/12 - sd(Y)^2/12)
sqrt(sd(X)^2/12 + sd(Y)^2/12)
(mean(X) - mean(Y))/sqrt(var(X)/12 + var(Y)/12)
t.test(Y,X)
Z <- (mean(Y) - mean(X))/sqrt(var(Y)/12 + var(X)/12)
2*(1-pnorm(Z))
t.test(Y,X)
Z <- (mean(Y) - mean(X))/sqrt(var(Y)/12 + var(X)/12)
2*(1-pnorm(Z))
setwd("/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/II IA Prac/")
dat <- read.csv("mice_pheno.csv")
head(dat)
chowPopulation <- dat %>% filter(Sex == "F", Diet == "chow") %>% select(Bodyweight) %>% unlist
mu_chow <- mean(chowPopulation)
mu_chow <- mean(chowPopulation)
mu_chow
chow<-sample(chowPopulation,N)
chowPopulation <- dat %>% filter(Sex == "F", Diet == "chow") %>% select(Bodyweight) %>% unlist
mu_chow <- mean(chowPopulation)
mu_chow
N<-30
chow<-sample(chowPopulation,N)
chowPopulation <- dat %>% filter(Sex == "F", Diet == "chow") %>% select(Bodyweight) %>% unlist
mu_chow <- mean(chowPopulation)
mu_chow
N<-30
chow<-sample(chowPopulation,N)
mean(chow)
plot(mean(chowPopulation) + c(-7,7),c(1,1),type="n",xlab="weight",ylab = "interval",ylim = c(1,B))
chowPopulation <- dat %>% filter(Sex == "F", Diet == "chow") %>% select(Bodyweight) %>% unlist
mu_chow <- mean(chowPopulation)
mu_chow
N<-30
chow<-sample(chowPopulation,N)
mean(chow)
se <- sd(chow)/sqrt(N)
Q <- qnorm(1-0.05/2)
interval <- c(mean(chow)-Q*se,mean(chow)+Q*se)
interval
B <- 250
plot(mean(chowPopulation) + c(-7,7),c(1,1),type="n",xlab="weight",ylab = "interval",ylim = c(1,B))
mypar(1,1)
plot(mean(chowPopulation) + c(-7,7),c(1,1),type="n",xlab="weight",ylab = "interval",ylim = c(1,B))
abline
plot(mean(chowPopulation) + c(-7,7),c(1,1),type="n",xlab="weight",ylab = "interval",ylim = c(1,B))
abline(y = mean(chowPopulation))
abline(v = mean(chowPopulation))
interval <- c(mean(chow)-Q*se,mean(chow)+Q*se)
?qnorm
interval <- c(mean(chow)-Q*se,mean(chow)+Q*se)
interval
B <- 250
mypar(1,1)
plot(mean(chowPopulation) + c(-7,7),c(1,1),type="n",xlab="weight",ylab = "interval",ylim = c(1,B))
abline(v = mean(chowPopulation))
for (i in 1:B){
chow <- sample(chowPopulation,N)
se <- sd(chow)/sqrt(N)
interval <- c(mean(chow)-Q*se,mean(chow)+Q*se)
covered <- mean(chowPopulation) <= interval[2] & mean(chowPopulation) >= interval[1]
color <- ifelse(covered,1,2)
lines(interval,c(i,i),col = color)
}
plot(mean(chowPopulation) + c(-7,7),c(1,1),type = "n",xlab = "weight",ylab = "interval",ylim = c(1,B))
abline(v = mean(chowPopulation))
plot(mean(chowPopulation) + c(-7,7),c(1,1),type = "n",xlab = "weight",ylab = "interval",ylim = c(1,B))
abline(v = mean(chowPopulation))
Q <- qnorm(1-0.05/2)
N <- 5
for (i in 1:B){
chow <- sample(chowPopulation,N)
se <- sd(chow)/sqrt(N)
interval <- c(mean(chow)-Q*se,mean(chow)+Q*se)
covered <- mean(chowPopulation) <= interval[2] & mean(chowPopulation) >= interval[1]
color <- ifelse(covered,1,2)
lines(interval,c(i,i),col = color)
}
library(dplyr)
setwd("/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/II IA Prac/")
dat <- read.csv("mice_pheno.csv")
controlPopulation <- filter(dat,Sex == "F" & Diet == "chow") %>% select(Bodyweight) %>% unlist
controlPopulation <- filter(dat,Sex == "F" & Diet == "chow") %>% select(Bodyweight) %>% unlist
hfPopulation <- filter(dat,Sex == "F" & Diet == "hf") %>% select(Bodyweight) %>% unlist
mu_hf <- mean(controlPopulation)
mu_control <- mean(hfPopulation)
mu_hf - mu_control
mu_control <- mean(controlPopulation)
mu_hf <- mean(hfPopulation)
mu_hf - mu_control
(mu_hf - mu_control)/mu_control*100
set.seed(1)
N <- 5
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
t.test(hf,control)$t.test
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
t.test(hf,control)$t.test
t.test(hf,control)$p.value
set.seed(1)
N <- 5
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
t.test(hf,control)$p.value
reject(12)
N < 12
alpha <- 0.05
B <- 2000
reject <- function(N, alpha = 0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject(12)
rejections <- replicate(B,reject(N))
mean(rejections)
N < 12
alpha <- 0.05
B <- 2000
set.seed(1)
reject <- function(N, alpha = 0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject(12)
rejections <- replicate(B,reject(N))
mean(rejections)
N < 12
alpha <- 0.05
B <- 2000
set.seed(1)
reject <- function(N, alpha = 0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject(12)
rejections <- replicate(B,reject(N))
mean(rejections)
N <- 12
alpha <- 0.05
B <- 2000
set.seed(1)
reject <- function(N, alpha = 0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject(12)
rejections <- replicate(B,reject(N))
mean(rejections)
N <- 12
alpha <- 0.05
B <- 2000
reject <- function(N, alpha = 0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject(12)
rejections <- replicate(B,reject(N))
mean(rejections)
N <- 12
alpha <- 0.05
B <- 2000
reject <- function(N, alpha = 0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject(12)
rejections <- replicate(B,reject(N))
mean(rejections)
Ns <- c(5,50,5)
power <- sapply(Ns,function(N){
rejections<-replicate(B,reject(N))
mean(rejections)
})
power <- sapply(Ns,function(N){
rejections<-replicate(B,reject(N))
mean(rejections)
})
plot(Ns,power,type="b")
power
N <- 12
alpha <- 0.05
B <- 2000
reject <- function(N, alpha = 0.05){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
pval <- t.test(hf,control)$p.value
pval < alpha
}
reject(12)
rejections <- replicate(B,reject(N))
mean(rejections)
Ns <- c(5,50,5)
power <- sapply(Ns,function(N){
rejections<-replicate(B,reject(N))
mean(rejections)
})
power
plot(Ns,power,type="b")
B<-2000
N <- 30
alphas <- c(0.1,0.05,0.01,0.001,0.0001)
power <- sapply(alphas,function(alpha){
rejections <- replicate(B,reject(N,alpha = alpha))
mean(rejections)
})
plot(alphas, power,xlab="alpha", type = "b",log = "x"
plot(alphas, power,xlab="alpha", type = "b",log = "x")
plot(alphas, power,xlab="alpha", type = "b",log = "x")
Ns <- seq(10,200,by=10)
Ns_rep <- rep(Ns, each=10)
Ns_rep
calculatePvalue <- fuction(N){
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
t.test(hf,control)$p.value
}
Ns <- seq(10,200,by=10)
Ns_rep <- rep(Ns, each=10)
pvalues <- sapply(Ns_rep, calculatePvalue)
calculatePvalue <- fuction(N) {
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
t.test(hf,control)$p.value
}
calculatePvalue <- fuction(N) {
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
return(t.test(hf,control)$p.value)
}
calculatePvalue <- fuction(N) {
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
return(t.test(hf,control)$p.value)
}
calculatePvalue <- fuction(N) {
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
return(t.test(hf,control)$p.value)
}
calculatePvalue <- function(N) {
hf <- sample(hfPopulation,N)
control <- sample(controlPopulation,N)
t.test(hf,control)$p.value
}
Ns <- seq(10,200,by=10)
Ns_rep <- rep(Ns, each=10)
pvalues <- sapply(Ns_rep, calculatePvalue)
plot(Ns_rep, pvalues, log = "y",xlab = "sample size",ylab = "p-values")
abline(h = c(.01,.05),col = "red", lwd=2)
sd_pool <- sqrt(((N-1)*var(hf) + (N-1)*var(control))/(2*N-2))
diff/sd_pool
sd_pool <- sqrt(((N-1)*var(hf) + (N-1)*var(control))/(2*N-2))
diff/sd_pool
N<-12
hf<-sample(hfPopulation,N)
control<-sample(controlPopulation,N)
diff <- mean(hf)-mean(control)
diff / mean(control) * 100
t.test(hf, control)$conf.int / mean(control)*100
sd_pool <- sqrt(((N-1)*var(hf) + (N-1)*var(control))/(2*N-2))
diff/sd_pool
bike$datetime <- as.POSIXct(bike$datetime)
ggplot(bike,aes(datetime,count)) + geom_point(aes(color=temp),alpha = 1)+scale_color_gradient(low = "#2196F3",high = "#FFEB3B")
library(data.table)
library(ggplot2)
setwd('/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/class 11 kaggle bicycle')
bike <- fread('train.csv')
head(bike)
ggplot(bike,aes(temp,count))+geom_point(aes(color=temp), alpha = 0.2)
bike$datetime <- as.POSIXct(bike$datetime)
ggplot(bike,aes(datetime,count)) + geom_point(aes(color=temp),alpha = 1)+scale_color_gradient(low = "#2196F3",high = "#FFEB3B")
bike$season<-factor(bike$season)
ggplot(bike,aes(season,count))+geom_boxplot(aes(group = season))
ggplot(bike[workingday==1],aes(hour,count))+geom_point(aes(color=temp))+scale_color_gradient(high='red',low='blue')
ggplot(bike[workingday==1],aes(hour,count))+geom_point(aes(color=temp),position = position_jitter(w=1,h=0))+scale_color_gradient(high='red',low='green')
library(data.table)
library(ggplot2)
setwd('/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/class 11 kaggle bicycle')
bike <- fread('train.csv')
head(bike)
ggplot(bike,aes(temp,count))+geom_point(aes(color=temp), alpha = 0.2)
bike$datetime <- as.POSIXct(bike$datetime)
ggplot(bike,aes(datetime,count)) + geom_point(aes(color=temp),alpha = 1)+scale_color_gradient(low = "#2196F3",high = "#FFEB3B")
cor(bike$temp,bike$count)
bike$season<-factor(bike$season)
ggplot(bike,aes(season,count))+geom_boxplot(aes(group = season))
bike$hour<-sapply(bike$datetime,function(x){
return(format(x,"%H"))
})
ggplot(bike[workingday==1],aes(hour,count))+geom_point(aes(color=temp))+scale_color_gradient(high='red',low='blue')
ggplot(bike[workingday==1],aes(hour,count))+geom_point(aes(color=temp),position = position_jitter(w=1,h=0))+scale_color_gradient(high='red',low='green')
ggplot(bike[workingday==1],aes(hour,count))+geom_point(aes(color=temp))+scale_color_gradient(high='red',low='blue')
ggplot(bike[workingday==1],aes(hour,count))+geom_point(aes(color=temp),position = position_jitter(w=1,h=0))+scale_color_gradient(high='red',low='green')
ggplot(bike[workingday==1],aes(hour,count))+geom_point(aes(color=temp))+scale_color_gradient(high='red',low='blue')
ggplot(bike[workingday==1],aes(hour,count))+geom_point(aes(color=temp),position = position_jitter(w=1,h=0))+scale_color_gradient(high='red',low='green')
model <- lm(count ~ temp,bike)
summary(model)
plot(model)
tst<-fread("test.csv")
tst
predict(tst,mod)
library(ggplot2)
library(data.table)
df<-fread('Economist_Assignment_Data.csv',drop = 1)
source('~/Desktop/NewDownloads/project.r')
library(ggplot2)
library(data.table)
df<-fread('Economist_Assignment_Data.csv',drop = 1)
library(ggplot2)
library(data.table)
setwd("/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/class 9")
df<-fread('Economist_Assignment_Data.csv',drop = 1)
head(df)
tail(df)
str(df)
summary(df)
pl<-ggplot(df,aes(CPI,HDI,color=Region))+geom_point()
pl<-ggplot(df,aes(CPI,HDI,color=Region))+geom_point(shape='O',size=5)
pd<-ggplot(df,aes(CPI,HDI,color=Region))+geom_point(shape='O',size=5)+geom_smooth(method = 'loess')
pl+geom_smooth(aes(group=1))
pl+geom_smooth(method='lm',formula=y~log(x),se=F,color='red',aes(group=1))
pl2<-pl+geom_smooth(method='lm',formula=y~log(x),se=F,color='red',aes(group=1))
pl2
pl3<-pl2+geom_text(data = df[5:25,1:5],aes(label=Country))
pl4<-pl2+geom_text(aes(label=Country))
pl3+scale_x_continuous('Corruption Perception Index 2011 (10=least corrupt)',limits = c(1,10),breaks = 1:10)
pl5<-pl3+scale_x_continuous('Corruption Perception Index,2011 (10=least corrupt)',limits = c(1,10),breaks = 1:10)
pl5
pl5+scale_y_continuous('Human Development Index, 2011 (1=best)')
pl6<-pl5+scale_y_continuous('Human Development Index, 2011 (1=best)')+ggtitle('Corruption and Human Development')
print(pl6)
