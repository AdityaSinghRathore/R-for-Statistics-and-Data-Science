b1=c()
mean=c()
{for(i in 1:5)
{ for(j in 1:1000)
s=rexp(n[i],0.5)
mean[j]=mean(s)
mle[j]=1/mean[j]
mse[j]=(a-mle[j])^2}
m1[i]=mean(mle)
m2[i]=mean(mse)
b1[i]=a-m1[i]}
y=cbind(n,m1,m2,b1)
y;
par(mfrow=c(1,3))
plot(n,m1,type="l",main="mle plot")
plot(n,m2,type="l",main="mse plot")
plot(n,b1,type="l",main="bias plot")
n=c(10,20,30,40,50)
n
a=0.5
mle=rep()
mse=rep()
m1=c()
m2=c()
b1=c()
mean=c()
for(i in 1:5)
{ for(j in 1:1000)
s=rexp(n[i],0.5)
mean[j]=mean(s)
mle[j]=1/mean[j]
mse[j]=(a-mle[j])^2}
m1[i]=mean(mle)
m2[i]=mean(mse)
b1[i]=a-m1[i]}
}
y=cbind(n,m1,m2,b1)
y
par(mfrow=c(1,3))
plot(n,m1,type="l",main="mle plot")
plot(n,m2,type="l",main="mse plot")
plot(n,b1,type="l",main="bias plot")
n=c(10,20,30,40,50)
n
a=0.5
mle=rep()
mse=rep()
m1=c()
m2=c()
b1=c()
mean=c()
for(i in 1:length(n))
{ for(j in 1:1000)
s=rexp(n[i],0.5)
mean[j]=mean(s)
mle[j]=1/mean[j]
mse[j]=(a-mle[j])^2}
m1[i]=mean(mle)
m2[i]=mean(mse)
b1[i]=a-m1[i]}
}
y=cbind(n,m1,m2,b1)
y
par(mfrow=c(1,3))
plot(n,m1,type="l",main="mle plot")
plot(n,m2,type="l",main="mse plot")
plot(n,b1,type="l",main="bias plot")
mle
n=c(10,20,30,40,50)
a=0
b=5
mle=rep()
mse=rep()
m1=c()
m2=c()
b1=c()
for(i in 1:length(n))
{
for(j in 1:1000)
{
mle[j]=max(runif(n[i],a,b))
mse[j]=(b-mle[j])^2
}
m1[i]=mean(mle)
m2[i]=mean(mse)
b1[i]=b-m1[i]
}
y=cbind(n,b1,m1,m2)
y;
par(mfrow=c(1,3))
plot(n,b1,type="l",main="bias plot")
plot(n,m1,type="l",main="mle plot")
plot(n,m2,type="l",main="mse plot")
par(mfrow=c(3,4))
x = rep()
a = rep()
z = dexp()
r <-c(2, 1.5, 0.5, 0.1)
for(i in 1:length(r)){
x[i] = rexp(1000, rate = r[i]);
z[i] = dexp(x[i],r[i]);
plot(z[i],x[i],main="pdf for "+r[i]);
a1[i]=pexp(y,1.5)
plot(x[i],a1[i],main="cdf for "+r[i])
hist(x[i])
}
par(mfrow=c(3,4))
x = rep()
a = rep()
z = rep()
r <-c(2, 1.5, 0.5, 0.1)
for(i in 1:length(r)){
x[i] = rexp(1000, rate = r[i]);
z[i] = dexp(x[i],r[i]);
plot(z[i],x[i],main="pdf for "+r[i]);
a1[i]=pexp(y,1.5)
plot(x[i],a1[i],main="cdf for "+r[i])
hist(x[i])
}
x=rexp(1000,rate=2);x
y=rexp(1000,rate=1.5);y
z=rexp(1000,rate=0.5);z
w=rexp(1000,rate=0.1);w
z1=dexp(x,2)
z2=dexp(y,1.5)
z3=dexp(z,0.5)
z4=dexp(w,0.1)
plot(z1,x,main="pdf for 2")
plot(z2,y,main="pdf for 1.5")
plot(z3,z,main="pdf for 0.5")
plot(z4,w,main="pdf for 0.1")
a1=pexp(x,2)
plot(x,a1,main="cdf for 2")
a2=pexp(y,1.5)
plot(y,a2,main="cdf for 1.5")
a3=pexp(z,0.5)
plot(z,a3,main="cdf for 0.5")
a4=pexp(w,0.1)
plot(w,a4,main="cdf for 0.1")
hist(x)
hist(y)
hist(z)
hist(w)
par(mfrow=c(3,4))
x = rep()
a = rep()
z = rep()
r <-c(2, 1.5, 0.5, 0.1)
for(i in 1:length(r)){
x[i] = rexp(1000, rate = r[i]);
z[i] = dexp(x[i],r[i]);
plot(z[i],x[i],main="pdf for "+r[i]);
a1[i]=pexp(y,1.5)
plot(x[i],a1[i],main="cdf for "+r[i])
hist(x[i])
}
par(mfrow=c(3,4))
x = rep()
a = rep()
z = rep()
r <-c(2, 1.5, 0.5, 0.1)
for(i in 1:length(r)){
x[i] = rexp(1000, rate = r[i]);
z[i] = dexp(x[i],r[i]);
plot(z[i],x[i],main="pdf for r[i]");
a1[i]=pexp(y,1.5)
plot(x[i],a1[i],main="cdf for r[i]")
hist(x[i])
}
help("replications")
help("rep")
par(mfrow=c(3,4))
x=rexp(1000,rate=2);x
y=rexp(1000,rate=1.5);y
z=rexp(1000,rate=0.5);z
w=rexp(1000,rate=0.1);w
z1=dexp(x,2)
z2=dexp(y,1.5)
z3=dexp(z,0.5)
z4=dexp(w,0.1)
plot(z1,x,main="pdf for 2")
plot(z2,y,main="pdf for 1.5")
plot(z3,z,main="pdf for 0.5")
plot(z4,w,main="pdf for 0.1")
a1=pexp(x,2)
plot(x,a1,main="cdf for 2")
a2=pexp(y,1.5)
plot(y,a2,main="cdf for 1.5")
a3=pexp(z,0.5)
plot(z,a3,main="cdf for 0.5")
a4=pexp(w,0.1)
plot(w,a4,main="cdf for 0.1")
hist(x)
hist(y)
hist(z)
hist(w)
rm(list=ls(all=TRUE))
PI=c(0.2, 0.5, 0.8)
x=c(0:14)
x
n=max(x)
par(mfrow=c(1,3))
for(i in 1:length(PI)){
Xlab=expression(italic(x))
density=pbinom(x,n,PI[i])
Ylab=bquote(italic(P(X=x)~~pi)==.(PI[i]))
plot(x,density,type='l',main = "CDF Plot", lwd=2,xlab=Xlab,ylab=Ylab)
abline(h=0,lwd=2)
}
cbind(x,density);
help("bquote")
help("pbinom")
~~pi
italic(~~pi)
bquote(~~pi)
bquote(~~~~pi)
sample <- c(1, 2)
sample
size <- c(10, 12)
size
mean = c(15, 14)
mean
sq = C(90, 108)
c1 = cbind(sample, size, mean, sq)
c1
x = sum(sq)
x
y = x/20
y
u = 1
u
p = u/sqrt(y*(1/10+1/12))
p
z = qt(0.95, 20)
z
rm(list=ls(all=TRUE))
sample <- c(1, 2)
sample
size <- c(10, 12)
size
mean = c(15, 14)
mean
sq = C(90, 108)
c1 = cbind(sample, size, mean, sq)
c1
x = sum(sq)
x
y = x/20
y
u = 1
u
p = u/sqrt(y*(1/10+1/12))
p
z = qt(0.95, 20)
z
rm(list=ls(all=TRUE))
sample = c(1, 2)
sample
size = c(10, 12)
size
mean = c(15, 14)
mean
sq = C(90, 108)
c1 = cbind(sample, size, mean, sq)
c1
x = sum(sq)
x
y = x/20
y
u = 1
u
p = u/sqrt(y*(1/10+1/12))
p
z = qt(0.95, 20)
z
rm(list=ls(all=TRUE))
sample = c(1, 2)
sample
size = c(10, 12)
size
mean = c(15, 14)
mean
sq = c(90, 108)
c1 = cbind(sample, size, mean, sq)
c1
x = sum(sq)
x
y = x/20
y
u = 1
u
p = u/sqrt(y*(1/10+1/12))
p
z = qt(0.95, 20)
z
help("qt")
rm(list=ls(all=TRUE))
p=c(0.26, 0.76)
x=c(0:11)
x
r = 12
par(mfrow=c(1,2))
for(i in 1:length(p)){
Xlab=expression(italic(x))
density=pnbinom(x,r,p[i])
Ylab=bquote(italic(P(X=x)~~beta)==.(p[i]))
plot(x,density,type='s',main = "Density Plot", lwd=2,xlab=Xlab,ylab=Ylab)
abline(h=0,lwd=2)
}
rm(list=ls(all=TRUE))
p=c(0.26, 0.76)
x=c(0:11)
x
r = 12
par(mfrow=c(1,2))
for(i in 1:length(p)){
Xlab=expression(italic(x))
density=dnbinom(x,r,p[i])
Ylab=bquote(italic(P(X=x)~~beta)==.(p[i]))
plot(x,density,type='s',main = "Density Plot", lwd=2,xlab=Xlab,ylab=Ylab)
abline(h=0,lwd=2)
}
rm(list=ls(all=TRUE))
sample = c(1, 2)
sample
size = c(10, 12)
size
mean = c(15, 14)
mean
sq = c(90, 108)
c1 = cbind(sample, size, mean, sq)
c1
x = 90/9
x
y = 108/11
y
u = x/y
u
z = qf(0.95, 9, 11)
z
help("rep")
help("c")
#Find the MLE of the exponential DISTn for the parameter theta when theta
#is equal to 2.5 and n=10,20,30,40,50 and 60.
#also obtain for the MLE , Bias , MSE for the different values of
#Inverse cdf method
rm(list=ls(all=TRUE))
n=c(10,20,30,40,50,60)
theta=2.5
MLE=rep()
bias=rep()
BIAS=rep()
MSE=rep()
mse=rep()
for(j in 1:length(n)){
m=rep()
for(i in 1:1000)
{
u=runif(n[j])
X=-log(1-u)/theta
mle=1/mean(X)
m[i]=mle
bias[i]=theta-mle
mse[i]=((theta-mle)^2)
}
MLE[j]=mean(m)
BIAS[j]=mean(bias)
MSE[j]=mean(mse)
}
fr=data.frame(n,MLE,BIAS,MSE)
fr
plot(n,MSE,type="l",col="red")
#graph is decreasing function so error decreases as
#sample size increases
install.packages(ggplot2)
install.packages("caret"."ggplot2");
install.packages("caret","ggplot2");
y
install.packages(c("caret", "ggplot2"))
library(tm)
print(require(XML))
install.packages("xml")
y
install.packages("XML")
help("pbinom")
runif(5,0,5)
runif(5,0,5)
runif(5,0,5)
help("rexp")
rexp(10)
rexp(10,5)
rexp(10,0,5)
# Create a matrix
m1<-matrix(v)
m1
# 8)
mat3<-matrix()
mat3<-replicate(4,floor(runif(5, min = 1, max = 20)))
mat3
setwd("/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/class 10 Student Data Regression")
df <- read.csv('student-mat.csv',sep = ';')
str(df)
str(df)
head(df)
summary(df)
# Checking for NAs
any(is.na(df))
# Exploratory Data Analysis
library(ggplot2)
install.packages(c("dplyr", "tidyr", "ggplot2"))
df <- read.csv('student-mat.csv',sep = ';')
str(df)
head(df)
summary(df)
# Checking for NAs
any(is.na(df))
# Exploratory Data Analysis
library(ggplot2)
library(ggthemes)
library(dplyr)
# Correlation
# grab only numeric columns
num.cols <- sapply(df, is.numeric)
head(num.cols)
library(corrgram)
library(corrplot)
help("corrplot")
# Take Only numeric columns for correlation
cor.data <- cor(df[,num.cols])
setwd("/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/class 10 Student Data Regression")
df <- read.csv('student-mat.csv',sep = ';')
str(df)
head(df)
summary(df)
# Checking for NAs
any(is.na(df))
setwd("D:\\MS BDA I SEM\\Computing For Data Science\\R\\class 10 Student Data Regression")
df <- read.csv('student-mat.csv',sep = ';')
str(df)
head(df)
summary(df)
# Checking for NAs
any(is.na(df))
# Exploratory Data Analysis
library(ggplot2)
library(ggthemes)
install.packages(c("ggthemes", "corrgram", "corrplot"))
# Histogram
ggplot(df,aes(x=G3)) + geom_histogram(bins = 20, alpha = 0.5, fill = 'blue') + theme_minimal()
# Splitting Training and tesing data
library(ggplot2)
library(ggthemes)
library(dplyr)
df <- read.csv('/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/class 10 Student Data Regression/student-mat.csv',sep = ';')
df <- read.csv('student-mat.csv',sep = ';')
library(caTools)
set.seed(101)
# Actual Splitting
sample <- sample.split(df$age, SplitRatio = 0.70)
#df <- read.csv('/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/class 10 Student Data Regression/student-mat.csv',sep = ';')
setwd("D:\\MS BDA I SEM\\Computing For Data Science\\R\\class 10 Student Data Regression")
df <- read.csv('student-mat.csv',sep = ';')
library(caTools)
set.seed(101)
# Actual Splitting
sample <- sample.split(df$age, SplitRatio = 0.70)
train = subset(df, sample == T)
test = subset(df, sample == F)
model <- lm(G3 ~ .,train)
summary(model)
source('D:/MS BDA I SEM/Computing For Data Science/R/class 10 Student Data Regression/buildingmodel.r', echo=TRUE)
results<-cbind(G3.predictions,test$G3)
G3.predictions <- predict(model,test)
results<-cbind(G3.predictions,test$G3)
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
# Dealing with negative predictions
to_zero <- function(x){
if (x<0){
return(0);
}else{
return(x);
}
}
G3.predictions <- predict(model,test)
results<-cbind(G3.predictions,test$G3)
colnames(results)<-c('pred','real')
results<-as.data.frame(results)
# Dealing with negative predictions
to_zero <- function(x){
if (x<0){
return(0);
}else{
return(x);
}
}
results$pred <- sapply(results$pred,to_zero)
mse<-mean((results$pred-results$real)^2)
mse
SSE = sum((results$pred-results$real)^2)
SST = sum((mean(df$G3)-results$real)^2)
R2 = 1-SSE/SST
R2
plot(model)
ggplot(res,aes(res))+geom_histogram(fill = 'blue',alpha = 0.5)
plot(model)
ggplot(res,aes(res))+geom_histogram(fill = 'blue',alpha = 0.5)
ggplot(res,aes(res))+geom_histogram(fill = 'blue',alpha = 0.5)
v<-c(1,2,3)
v[:2]
v[1:2]
2%/%3
