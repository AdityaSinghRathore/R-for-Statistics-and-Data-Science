greetname("mno")
greetreturn <- function(name){
return(paste("Hello ",name))
}
f <- greetreturn("ABC")
f
greetname <- function(name){
print(paste("Hello ",name))
print(paste(name," Have a nice day"))
}
g<-greetname("AAA")
g
product<-function(a,b){
return(a*b)
}
product(2,2)
productq<-function(a,b){
return(a*b)
}
productq(1,2)
a=3
b=c(1,2,3,4,5)
a<-3
b<-c(1,2,3,4,5)
a in b
b==a
b[b==55]
a %in% b
help("is.element")
if(b==a){print("hello")}
any(b==a)
checkcontains <- function(a,b){
flag<-F
if(any(b==a)){
flag<-T
}
return(flag)
}
checkcontains(1,c(1,2,3))
b==a
d<-b==a
count(d[T])
a<-3
b<-c(1,2,3,3,3,5)
b==a
b[b==a]
count(b[b==a])
length(b[b==a])
checkcontains <- function(a,b = vector()){
flag<-F
if(any(b==a)){
flag<-T
}
return(flag)
}
checkcontains(a,a)
noofoccurances<-function(a,b = vector()){
return(length(b[b==a]))
}
noofoccurances(a,b)
shipaluminium<-function(kgs){
# big bars
bb<-kgs%%5
sb<-kgs-bb*5
shipment <- c(bb,sb)
colnames(shipment)<-c('Big','Small')
rownames(shipment)<-c('Bars')
return(shipment)
}
shipaluminium(13)
shipaluminium<-function(kgs){
# big bars
bb<-kgs%%5
sb<-kgs-bb*5
bars <- c(bb,sb)
rownames(bars)<-c('Big','Small')
return(bars)
}
shipaluminium(12)
shipaluminium<-function(kgs){
# big bars
bb<-kgs%%5
sb<-kgs-bb*5
bars <- c(bb,sb)
names(bars)<-c('Big','Small')
return(bars)
}
shipaluminium(12)
help("append")
help("break")
checkprime <- function(a){
flagprime<-F
end <- a/2
for (i in 1:end){
if(a%%i==0){
flagprime<-T
break
}
}
return(flagprime)
}
checkprime(1)
checkprime(44)
checkprime <- function(a){
flagprime<-F
end <- a/2
for (i in 1:end){
print("checking..")
if(a%%i==0){
flagprime<-T
}
}
return(flagprime)
}
checkprime(44)
checkprime(3)
checkprime(9)
checkprime <- function(a){
flagprime<-T
end <- a/2
for (i in 1:end){
print("checking..")
if(a%%i==0){
flagprime<-F
break
}
}
return(flagprime)
}
checkprime(33)
checkprime(31)
checkprime(3)
checkprime <- function(a){
flagprime<-T
end <- a/2
for (i in 2:end){
print("checking..")
if(a%%i==0){
flagprime<-F
break
}
}
return(flagprime)
}
checkprime(3)
checkprime(31)
checkprime(34)
help(append)
ff <- c(1,2)
append(ff,1,after = 1)
any(ff==1)
any(ff==2)
addnotthrees <- function(x,y,z){
result<-0
lv <- c(x,y,z)
lm <- lv[lv%%3 != 0]
result <- result + sum(lm)
return(result)
}
addnotthrees(1,2,3)
addnotthrees(3,2,3)
df<-mtcars
str(df)
summary(df)
dim(df)
summarise(df,avghp = mean(df$hp))
library('dplyr')
summarise(df,avghp = mean(df$hp))
summarise(df,avghp = mean(hp,na.rm = T))
summarise(group_by(df,cyl),avghp = mean(hp,na.rm = T))
count(df,cyl)
count(df,hp)
install.packages(data.table)
install.packages('data.table')
df
comp <- c(1,1,1,2,2,2,3,3,3)
yr <- c(1998,1999,2000,1998,1999,2000,1998,1999,2000)
q1 <- runif(9, min=0, max=100)
q2 <- runif(9, min=0, max=100)
q3 <- runif(9, min=0, max=100)
q4 <- runif(9, min=0, max=100)
df<-data.frame(comp = comp, year=yr, Qtr1 = q1, Qtr2 = q2, Qtr3 = q3, Qtr4 = q4)
df
gather(df, Quater, Revenue, Qtr1:Qtr4)
library('dplyr')
library('tidyr')
gather(df, Quater, Revenue, Qtr1:Qtr4)
stocks<-data.frame(as.Date('2009-01-01')+0:9)
stocks<-data.frame(as.Date('2009-01-01')+0:9,x=rnorm(10,0,1),y=rnorm(10,0,2),z=rnorm(10,0,4))
stocks
stocks<-data.frame(time = as.Date('2009-01-01')+0:9,x=rnorm(10,0,1),y=rnorm(10,0,2),z=rnorm(10,0,4))
stocks
stocks.gather<-stocks%>%gather(stock,price,-time)
stocks.gather
stocks.gather %>% spread(stocks,price)
stocks.gather %>% spread(stock,price)
df<-data.frame(x = c(NA, "a.x","b.y","c.z"))
df
df %>% seprate(x,c("ABC","XYZ"))
library('tidyr')
df %>% seprate(x,c("ABC","XYZ"))
df %>% separate(x,c("ABC","XYZ"))
df %>% separate(x,c("ABC","XYZ"),sep="_")
df<-data.frame(x = c(NA, "a_x","b_y","c_z"))
df %>% separate(x,c("ABC","XYZ"),sep="_")
unite(df,"ABC,XYZ")
unite(df,"ABC","XYZ")
unite(df.sep,newcol,ABC,XYZ)
unite(df,newcol,ABC,XYZ)
unite(df.sep,newcol,ABC,XYZ)
unite(df,newcol,ABC,XYZ)
df
df %>% separate(x,c("ABC","XYZ"),sep="_")
unite(df,newcol,ABC,XYZ)
df
df<-data.frame(x = c(NA, "a_x","b_y","c_z"))
df %>% separate(x,c("ABC","XYZ"),sep="_")
unite(df.sep,new.join.col,ABC,XYZ)
unite(df.sep,new.join.col,ABC,XYZ, sep="---")
df
df<-data.frame(x = c(NA, "a_x","b_y","c_z"))
df %>% separate(x,c("ABC","XYZ"),sep="_")
df
df<-data.frame(x = c(NA, "a_x","b_y","c_z"))
df.sep<-df %>% separate(x,c("ABC","XYZ"),sep="_")
unite(df.sep,new.join.col,ABC,XYZ)
unite(df.sep,new.join.col,ABC,XYZ, sep="---")
df<-data.frame(comp = comp, year=yr, Qtr1 = q1, Qtr2 = q2, Qtr3 = q3, Qtr4 = q4)
df
gather(df, Quater, Revenue, Qtr1:Qtr4)
stocks<-data.frame(time = as.Date('2009-01-01')+0:9,x=rnorm(10,0,1),y=rnorm(10,0,2),z=rnorm(10,0,4))
stocks
stocks.gather<-stocks%>%gather(stock,price,-time)
stocks.gather
stocks<-data.frame(time = as.Date('2009-01-01')+0:9,x=rnorm(10,0,1),y=rnorm(10,0,2),z=rnorm(10,0,4))
stocks
stocks.gather<-stocks%>%gather(stock,price,-time)
stocks.gather
stocks.gather %>% spread(stock,price)
ggplot(data = mtcars)
ggplot(aes(x=mpg,y=hp))
library(ggplot2)
ggplot(data = mtcars)
ggplot(aes(x=mpg,y=hp))
pl<-ggplot(data = mtcars,aes(x=mpg,y=hp)) + geom_point()
pl<-ggplot(data = mtcars,aes(x=mpg,y=hp)) + geom_point()
pl
pl2<-pl + facet_grid(cyl ~ .) + stat_smooth()
pl2
pl2 + coord_cartesian(c(15,25))
pl2 + coord_cartesian(xlim = c(15,25))
pl2 + coord_cartesian(xlim = c(15,25)) + xlab=papapa
pl2
pl2 + coord_cartesian(xlim = c(15,25)) + xlab="MILES"
pl2
pl<-ggplot(data = mtcars,aes(x=mpg,y=hp), xlab="MILES") + geom_point()
pl2<-pl + facet_grid(cyl ~ .) + stat_smooth()
pl2 + coord_cartesian(xlim = c(15,25))
pl2
pl<-ggplot(data = mtcars,aes(x=mpg,y=hp), xlab="MILES") + geom_point()
pl<-ggplot(data = mtcars,aes(x=mpg,y=hp), xlab="MILES") + geom_point()
pl2<-pl + facet_grid(cyl ~ .) + stat_smooth()
pl3<-pl2 + coord_cartesian(xlim = c(15,25))
pl3
pl<-ggplot(data = mtcars,aes(x=mpg,y=hp), xlab="MILES") + geom_point()
pl
pl3<-pl2 + coord_cartesian(xlim = c(15,25)) + theme_bw()
pl3
pl3<-pl2 + coord_cartesian(xlim = c(15,25))+xlab("MILES")
pl3
install.packages("ggplot2movies")
install.packages("ggplot2theme")
install.packages("ggplotthemes")
install.packages("ggplot2themes")
install.packages("ggplot2movies")
library(ggplot2)
library(ggplot2movies)
df <- movies[sample(nrow(movies), 1000), ]
head(df)
qplot(rating, data = df, geom = 'histogram', binwidth=0.1, alpha =
0.8)
pl <- ggplot(df, aes(x=rating))
pl + geom_histogram()
pl <- ggplot(df, aes(x=rating))
pl + geom_histogram(binwidth = 0.1, color = 'red', fill = 'pink')
pl <- ggplot(df, aes(x=rating))
pl + geom_histogram(binwidth = 0.1, color = 'red', fill = 'pink',
alpha = 0.4)
pl <- ggplot(df, aes(x=rating))
pl + geom_histogram(binwidth = 0.1, color='red', fill='pink') +
xlab('Movie Ratings') + ylab('Occurrences') + ggtitle('Movie
Ratings')
pl <- ggplot(df, aes(x=rating))
pl + geom_histogram(binwidth = 0.1, fill = 'blue', alpha = 0.4) +
xlab('Movie Ratings') + ylab('Occurrences')
pl <- ggplot(df,aes(x=rating))
pl + geom_histogram(binwidth=0.1,aes(fill=..count..)) + xlab('Movie
Ratings')+ ylab('Occurences')
income
Income
help('lm')
# Genera Form Linear Regression
# model <- lm(y ~ x1 + x2, data)
# Use all deatures in data
# model <- lm(y ~. , data)
# Splitting Training and tesing data
df <- read.csv('student-mat.csv',sep = ';')
library(caTools)
library(ggplot2)
set.seed(101)
# Actual Splitting
sample <- sample.split(df$age, SplitRatio = 0.70)
train = subset(df, sample == T)
test = subset(df, sample == F)
model <- lm(G3 ~ .,train)
summary(model)
# Visualize Model
res <- residuals(model)
# Convert to DataFrame for ggplot
res <- as.data.frame(res)
head(res)
ggplot(res,aes(res))
plot(model)
# Genera Form Linear Regression
# model <- lm(y ~ x1 + x2, data)
# Use all deatures in data
# model <- lm(y ~. , data)
# Splitting Training and tesing data
df <- read.csv('/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/class 10 Student Data Regressionstudent-mat.csv',sep = ';')
library(caTools)
library(ggplot2)
set.seed(101)
# Actual Splitting
sample <- sample.split(df$age, SplitRatio = 0.70)
train = subset(df, sample == T)
test = subset(df, sample == F)
model <- lm(G3 ~ .,train)
summary(model)
# Visualize Model
res <- residuals(model)
# Convert to DataFrame for ggplot
res <- as.data.frame(res)
head(res)
ggplot(res,aes(res))
plot(model)
# Genera Form Linear Regression
# model <- lm(y ~ x1 + x2, data)
# Use all deatures in data
# model <- lm(y ~. , data)
# Splitting Training and tesing data
library(ggplot2)
library(ggthemes)
library(dplyr)
df <- read.csv('/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/class 10 Student Data Regressionstudent-mat.csv',sep = ';')
library(caTools)
set.seed(101)
# Actual Splitting
sample <- sample.split(df$age, SplitRatio = 0.70)
train = subset(df, sample == T)
test = subset(df, sample == F)
model <- lm(G3 ~ .,train)
summary(model)
# Visualize Model
res <- residuals(model)
# Convert to DataFrame for ggplot
res <- as.data.frame(res)
head(res)
ggplot(res,aes(res))
plot(model)
df
# Genera Form Linear Regression
# model <- lm(y ~ x1 + x2, data)
# Use all deatures in data
# model <- lm(y ~. , data)
# Splitting Training and tesing data
library(ggplot2)
library(ggthemes)
library(dplyr)
df <- read.csv('/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/class 10 Student Data Regression/student-mat.csv',sep = ';')
library(caTools)
set.seed(101)
# Actual Splitting
sample <- sample.split(df$age, SplitRatio = 0.70)
train = subset(df, sample == T)
test = subset(df, sample == F)
model <- lm(G3 ~ .,train)
summary(model)
# Visualize Model
res <- residuals(model)
# Convert to DataFrame for ggplot
res <- as.data.frame(res)
head(res)
ggplot(res,aes(res))
plot(model)
mod<-lm(count ~ . -atemp -casual -registered,bike)
bike <- fread('hour.csv')
library(data.table)
library(ggplot2)
setwd('/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/class 11 kaggle bicycle')
bike <- fread('hour.csv')
head(bike)
ggplot(bike,aes(temp,count))+geom_point(aes(color=temp), alpha = 0.2)
bike <- fread('test.csv')
head(bike)
ggplot(bike,aes(temp,count))+geom_point(aes(color=temp), alpha = 0.2)
bike$datetime <- as.POSIXct(bike$datetime)
ggplot(bike,aes(datetime,count)) + geom_point(aes(color=temp),alpha = 1)+scale_color_gradient(low = "#2196F3",high = "#FFEB3B")
library(data.table)
library(ggplot2)
setwd('/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/class 11 kaggle bicycle')
bike <- fread('test.csv')
head(bike)
library(data.table)
library(ggplot2)
setwd('/media/aditya/APPS/MS BDA I SEM/Computing For Data Science/R/class 11 kaggle bicycle')
bike <- fread('train.csv')
head(bike)
ggplot(bike,aes(temp,count))+geom_point(aes(color=temp), alpha = 0.2)
bike$datetime <- as.POSIXct(bike$datetime)
ggplot(bike,aes(datetime,count)) + geom_point(aes(color=temp),alpha = 1)+scale_color_gradient(low = "#2196F3",high = "#FFEB3B")
cor(bike$temp,bike$count)
cor(bike$temp,bike$count)
9.17058*25+6.0462
predict(model,data.frame(temp=25))
predict(model,data.frame(temp=25))
summary(model)
plot(model)
model <- lm(count ~ temp,bike)
9.17058*25+6.0462
predict(model,data.frame(temp=25))
str(bike)
mod<-lm(count ~ . -atemp -casual -registered,bike)
predict(mod,data.frame(temp=25))
summary(mod)
tst<-fread("test.csv")
predict(tst)
tst<-fread("test.csv")
predict(tst,mod)
mod<-lm(count ~ . -atemp -casual -registered,bike)
summary(mod)
tst<-fread("test.csv")
predict(tst,mod)
tst
install.packages("swirl")
library(swirl)
install_course_github("swirldev","R_Programming_E")
install_course("Getting and Cleaning Data")
swirl()
bye()
swirl()
install_course("Getting and Cleaning Data")
swirl()
install_course_github("swirldev","R_Programming_E")
install_course_github("swirldev","R_Programming_E")
install_course_github("swirldev","R_Programming")
install_course_github("swirldev","R_Programming")
set_config( config( ssl_verifypeer = 0L ) )
library(bitops)
library(RCurl)
library(httr)
set_config( config( ssl_verifypeer = 0L ) )
install_course_github("swirldev","R_Programming_E")
swirl()
5+9
5+7
x<-5+7
x
y<-x-3
y
z <- c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z*2 + 1000
my_div
bye()
x = rnorm(100)
y = rnorm(100)
plot(x,y)
hist(x,y)
point(x,y)
plot(x,y)
chisq(x,y)
swirl()
getwd()
ls()
x <- 9
ls()
dir()
help(list.files)
list.files(recursive = T)
?list.files
args(list.files)
old.dir <- getwd()
dir.create(testdit)
dir.create(testdir)
dir.create("testdir")
setwd('/estdir')
setwd('/testdir')
setwd('testdir')
file.create("mytest.r")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
